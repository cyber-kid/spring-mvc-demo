apiVersion: v1
kind: Service
metadata:
  name: app-mailhog-ui
spec:
  ports:
    - port: 8025
      protocol: TCP
  selector:
    app: mailhog
  type: NodePort

---

apiVersion: v1
kind: Service
metadata:
  name: app-mailhog
spec:
  ports:
    - port: 1025
      protocol: TCP
  selector:
    app: mailhog
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailhog-deployment
  labels:
    app: mailhog
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mailhog
  template:
    metadata:
      labels:
        app: mailhog
    spec:
      containers:
        - name: my-mailhog
          image: mailhog/mailhog
          ports:
            - containerPort: 8025
            - containerPort: 1025

---

apiVersion: v1
kind: Service
metadata:
  name: app-mysql
  labels:
    app: mysql
spec:
  ports:
    - port: 3306
      protocol: TCP
  selector:
    app: mysql

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: my-mysql
          image: mysql:5
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: init-db-volume
              mountPath: /docker-entrypoint-initdb.d
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "my-root-pw"
            - name: MYSQL_DATABASE
              value: "app"
            - name: MYSQL_USER
              value: "app"
            - name: MYSQL_PASSWORD
              value: "test"
          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 15
            periodSeconds: 10
      volumes:
        - name: init-db-volume
          configMap:
            name: init-db

---

apiVersion: v1
kind: Service
metadata:
  name: spring-app-service
spec:
  selector:
    app: spring-demo
  ports:
    - name: "app"
      port: 8080
      targetPort: 8080
  type: NodePort

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-app-deployment
  labels:
    app: spring-demo
spec:
  replicas: 2
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: spring-demo
  template:
    metadata:
      labels:
        app: spring-demo
    spec:
      initContainers:
        - name: init-backend
          image: busybox
          command: ['sh', '-c', 'while ! telnet app-mysql:3306; do echo waiting for back-end; sleep 5; done;']
      containers:
      - name: app-spring-mvc-demo
        image: amyrgorod/app-template:latest
        ports:
          - containerPort: 8080
        volumeMounts:
          - name: spring-config-volume
            mountPath: /config/
        env:
          - name: SPRING_CONFIG_LOCATION
            value: "/config/"
      volumes:
        - name: spring-config-volume
          configMap:
            name: spring-config
